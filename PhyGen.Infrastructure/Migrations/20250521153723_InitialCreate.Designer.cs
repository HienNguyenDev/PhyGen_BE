// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PhyGen.Infrastructure.Database;

#nullable disable

namespace PhyGen.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250521153723_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PhyGen.Domain.Chapters.Chapter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChapterCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ChapterName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Chapters", "public");
                });

            modelBuilder.Entity("PhyGen.Domain.Classes.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Classes", "public");
                });

            modelBuilder.Entity("PhyGen.Domain.ExamSets.ExamSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReviewNote")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ReviewedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId1")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ReviewedBy");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("ExamSets", "public");
                });

            modelBuilder.Entity("PhyGen.Domain.ExamSets.ExamSetQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExamSetId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("QuestionId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExamSetId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuestionId1");

                    b.ToTable("ExamSetQuestions", "public");
                });

            modelBuilder.Entity("PhyGen.Domain.Questions.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("AIConfidence")
                        .HasColumnType("real");

                    b.Property<Guid>("ChapterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceFile")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("ClassId");

                    b.HasIndex("TypeId");

                    b.ToTable("Questions", "public");
                });

            modelBuilder.Entity("PhyGen.Domain.Questions.QuestionTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChapterId")
                        .HasColumnType("uuid");

                    b.Property<string>("TemplateText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("TypeId");

                    b.ToTable("QuestionTemplates", "public");
                });

            modelBuilder.Entity("PhyGen.Domain.Questions.QuestionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Structure")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("QuestionTypes", "public");
                });

            modelBuilder.Entity("PhyGen.Domain.Topics.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChapterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Keyword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Synonyms")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("Topics", "public");
                });

            modelBuilder.Entity("PhyGen.Domain.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasMaxLength(100)
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Users", "public");
                });

            modelBuilder.Entity("PhyGen.Domain.Chapters.Chapter", b =>
                {
                    b.HasOne("PhyGen.Domain.Classes.Class", "Class")
                        .WithMany("Chapters")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("PhyGen.Domain.ExamSets.ExamSet", b =>
                {
                    b.HasOne("PhyGen.Domain.Classes.Class", "Class")
                        .WithMany("ExamSets")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhyGen.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhyGen.Domain.Users.User", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewedBy");

                    b.HasOne("PhyGen.Domain.Users.User", null)
                        .WithMany("CreatedExamSets")
                        .HasForeignKey("UserId");

                    b.HasOne("PhyGen.Domain.Users.User", null)
                        .WithMany("ReviewedExamSets")
                        .HasForeignKey("UserId1");

                    b.Navigation("Class");

                    b.Navigation("Creator");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("PhyGen.Domain.ExamSets.ExamSetQuestion", b =>
                {
                    b.HasOne("PhyGen.Domain.ExamSets.ExamSet", "ExamSet")
                        .WithMany("ExamSetQuestions")
                        .HasForeignKey("ExamSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhyGen.Domain.Questions.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhyGen.Domain.Questions.Question", null)
                        .WithMany("ExamSetQuestions")
                        .HasForeignKey("QuestionId1");

                    b.Navigation("ExamSet");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("PhyGen.Domain.Questions.Question", b =>
                {
                    b.HasOne("PhyGen.Domain.Chapters.Chapter", "Chapter")
                        .WithMany("Questions")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhyGen.Domain.Classes.Class", "Class")
                        .WithMany("Questions")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhyGen.Domain.Questions.QuestionType", "Type")
                        .WithMany("Questions")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("Class");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("PhyGen.Domain.Questions.QuestionTemplate", b =>
                {
                    b.HasOne("PhyGen.Domain.Chapters.Chapter", "Chapter")
                        .WithMany("QuestionTemplates")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhyGen.Domain.Questions.QuestionType", "Type")
                        .WithMany("QuestionTemplates")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("PhyGen.Domain.Topics.Topic", b =>
                {
                    b.HasOne("PhyGen.Domain.Chapters.Chapter", "Chapter")
                        .WithMany("Topics")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("PhyGen.Domain.Chapters.Chapter", b =>
                {
                    b.Navigation("QuestionTemplates");

                    b.Navigation("Questions");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("PhyGen.Domain.Classes.Class", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("ExamSets");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("PhyGen.Domain.ExamSets.ExamSet", b =>
                {
                    b.Navigation("ExamSetQuestions");
                });

            modelBuilder.Entity("PhyGen.Domain.Questions.Question", b =>
                {
                    b.Navigation("ExamSetQuestions");
                });

            modelBuilder.Entity("PhyGen.Domain.Questions.QuestionType", b =>
                {
                    b.Navigation("QuestionTemplates");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("PhyGen.Domain.Users.User", b =>
                {
                    b.Navigation("CreatedExamSets");

                    b.Navigation("ReviewedExamSets");
                });
#pragma warning restore 612, 618
        }
    }
}
